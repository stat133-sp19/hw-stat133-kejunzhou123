context("test aux_mean")
library(binomial)
source("/Users/a123/Desktop/computing with data/workout3/binomial/R/check_trials.R")
trials1=10
prob1=0.1
trials2=12
prob2=0.5
trials3=13
prob3=0.2

x1=-1
x2=0.3
x3=1.2
test_that("test prob", {
  expect_length(check_prob(x2), 1)
  expect_equal(check_prob(x2), TRUE)
  expect_error(check_prob(x3), "invalid prob value")
})

x1=10
x2=0.5
x3=-1
test_that("test trials", {
  expect_equal(check_trials(x1), TRUE)
  expect_error(check_trials(x2), "invalid trials value")
  expect_error(check_trials(x3),"invalid trials value")
})

success=c(1,2,3,4)
trials=10
success2=c(2,3,4,5)
trials2=1
success3=0.4
trials3=10
test_that("test success", {
  expect_equal(check_success(success,trials), TRUE)
  expect_error(check_success(success2,trials2), "success cannot be greater than trials")
  expect_error(check_success(success3,trials3),"invalid success value")
})


trials=10
prob=0.1
test_that("test aux_mean", {
  expect_length(aux_mean(trials1,prob1), 1)
  expect_equal(aux_mean(trials2,prob2), 1)
  expect_type(aux_mean(trials3,prob3),'double')
})

test_that("test aux_variance", {
  trials=10
  prob=0.3
  expect_length(aux_variance(trials,prob), 1)
  expect_equal(aux_variance(trials,prob), 2.1)
  expect_type(aux_variance(trials,prob),'double')
})

test_that("test aux_mode", {
  trials=10
  prob=0.3
  expect_length(aux_mode(trials,prob), 1)
  expect_equal(aux_mode(trials,prob), 3)
  expect_type(aux_mode(trials,prob),'double')
})

test_that("test aux_skewness", {
  trials=10
  prob=0.3
  expect_length(aux_skewness(trials,prob), 1)
  expect_equal(round(aux_skewness(trials,prob),3), 0.276)
  expect_type(aux_skewness(trials,prob),'double')
})


test_that("test aux_kurtosis", {
  trials=10
  prob=0.3
  expect_length(aux_kurtosis(trials,prob), 1)
  expect_equal(round(aux_kurtosis(trials,prob),3), -0.124)
  expect_type(aux_kurtosis(trials,prob),'double')
})

n=5
k1=c(1,2,34,5)
k2=2
k3=1:3
test_that("test bin_choose", {
  #expect_length(bin_choose(n,k), 1)
  expect_equal(bin_choose(n,k2), 10)
  expect_length(bin_choose(n,k3),3)
  expect_error(bin_choose(n,k1),"k cannot be greater than n")
})


s=2
trial=5
prob=0.5
s2=0:2
prob2=0.45
s3=4:10
trials=5
test_that("test bin_probability", {
  #expect_length(bin_choose(n,k), 1)
  expect_equal(bin_probability(s,trial,prob), 0.3125)
  expect_length(bin_probability(s2,trials,prob),3)
  expect_error(bin_probability(s3,trials,prob),"success cannot be greater than trials")
})


trials=5
prob=0.5
prob2=0.45
trials=5
test_that("test bin_distribution", {
  #expect_length(bin_choose(n,k), 1)
  expect_is(bin_distribution(trials,prob), c("bindis","data.frame"))
  expect_equal(nrow(bin_distribution(trials,prob2)),6)
  expect_named(bin_distribution(trials,prob),c("success","probability"))
})

trials=5
prob=0.5
prob2=0.45
trials=5
test_that("test bin_cumulative", {
  #expect_length(bin_choose(n,k), 1)
  expect_is(bin_cumulative(trials,prob), c("bincum","data.frame"))
  expect_equal(round(bin_cumulative(trials,prob2)[2,2],3),0.206)
  expect_named(bin_cumulative(trials,prob),c("success","probability","cumulative"))
})
















