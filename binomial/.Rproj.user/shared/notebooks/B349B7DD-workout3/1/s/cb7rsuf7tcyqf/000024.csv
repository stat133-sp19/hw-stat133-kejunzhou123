"0","library(ggplot2)"
"0","#this function is about testing whether the input probability is valid or not. If it is invalid, stop the function and give the error message."
"0","check_prob=function(prob){"
"0","  if (prob<=1 & prob>0) return(TRUE)"
"0","  else stop(""invalid prob value"")"
"0","}"
"0",""
"0","#this function is about testing whether the trials are valid or not. If it is invalid, stop the function and give the error message"
"0","check_trials=function(trials){"
"0","  if (trials%%1==0 & trials>=0){"
"0","    return (TRUE)"
"0","  }"
"0","  else stop(""invalid trials value"")"
"0","}"
"0",""
"0","#this function is about testing whether the success are valid or not. If it is invalid which means it is greater than trials or is not integer, stop the function and give the error message"
"0","check_success=function(success,trials){"
"0","  for (i in (1:length(success))){"
"0","    if (success[i]>trials) stop(""success cannot be greater than trials"")"
"0","  }"
"0","  if(all(success==as.integer(success))==FALSE) stop(""invalid success value"")"
"0","  else return (TRUE)"
"0",""
"0","}"
"0",""
"0","aux_mean=function(trials,prob){"
"0","  return (trials*prob)"
"0","}"
"0","aux_variance=function(trials,prob){"
"0","  return (trials*prob*(1-prob))"
"0","}"
"0","aux_mode=function(trials,prob){"
"0","  a=floor(trials*prob+prob)"
"0"," return (a)"
"0","}"
"0","aux_skewness=function(trials,prob){"
"0","  return ((1-2*prob)/(sqrt(trials*prob*(1-prob))))"
"0","}"
"0","aux_kurtosis=function(trials,prob){"
"0","  return ((1-6*prob*(1-prob))/(trials*prob*(1-prob)))"
"0","}"
"0",""
"0",""
"0","bin_choose=function(n,k){"
"0","  if (all(k<=n)) return (factorial(n)/(factorial(k)*factorial(n-k)))"
"0","  else stop(""k cannot be greater than n"")"
"0","}"
"0","bin_choose(n = 5, k = 2)"
"1","[1]"
"1"," 10"
"1","
"
"0","bin_choose(5, 0)"
"1","[1]"
"1"," 1"
"1","
"
"0","bin_choose(5, 1:3)"
"1","[1]"
"1","  5"
"1"," 10"
"1"," 10"
"1","
"
"0","bin_probability=function(success,trials,prob){"
"0","  check_trials(trials)"
"0","  check_prob(prob)"
"0","  check_success(success,trials)"
"0","  return ((bin_choose(trials,success))*(prob^success)*(1-prob)^(trials-success))"
"0","}"
"0",""
"0","bin_distribution=function(trials,prob){"
"0","  p=c()"
"0","  for (i in 1:(trials+1)){"
"0","    p[i]=bin_probability(i-1,trials,prob)"
"0","  }"
"0","  s=seq(0,trials)"
"0","  dataframe=data.frame(success=s,probability=p)"
"0","  class(dataframe)=append(""bindis"",class(dataframe))"
"0","  #dataframe=as.data.frame(dataframe)"
"0","  return (dataframe)"
"0","}"
"0",""
"0","s=bin_distribution(trials = 5, prob = 0.5)"
"0",""
"0","plot <- function (x) {"
"0","   UseMethod(""plot"", x)"
"0"," }"
"0",""
"0","plot.bindis=function(obj){"
"0","  ggplot(obj,aes(x=success,y=probability))+"
"0","  geom_bar(stat=""identity"")+labs(title=""frequencey"")+scale_x_continuous(breaks=seq(0,5,1))"
"0","}"
"0",""
"0","dis1 <- bin_distribution(trials = 5, prob = 0.5)"
"0","plot(dis1)"
